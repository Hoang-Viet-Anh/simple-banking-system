type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: "package banking;\n\nimport java.util.Scanner;\nimport java.util.Arrays;\n\
    import java.util.Random;\nimport java.util.Map;\nimport java.util.HashMap;\n\n\
    public class Main {\n    \n    public class Account {\n\n    private int[] cardNumber;\n\
    \    private int pinCode;\n    private int balance;\n\n    public Account() {\n\
    \        cardNumber = new int[16];\n        Random random = new Random();\n  \
    \      String bin = \"4 0 0 0 0 0\";\n        Scanner scanner = new Scanner(bin);\n\
    \        for (int i = 0; i < 16; i++) {\n            if(i < 6) {\n           \
    \     cardNumber[i] = scanner.nextInt();\n            } else {\n             \
    \   cardNumber[i] = random.nextInt(10);\n            }\n        }\n        pinCode\
    \ = random.nextInt(10000);\n        balance = 0;\n    }\n\n    public int[] getCardNumber()\
    \ {\n        return cardNumber;\n    }\n\n    public int getPinCode() {\n    \
    \    return pinCode;\n    }\n\n    public void setPinCode(int pinCode) {\n   \
    \     this.pinCode = pinCode;\n    }\n\n    public int getBalance() {\n      \
    \  return balance;\n    }\n\n    public void addBalance(int amount) {\n      \
    \  if(amount > 0) {\n            balance += amount;\n        }\n    }\n}\n\npublic\
    \ class Database {\n\n    private Map<String, Account> cards;\n\n    public Database()\
    \ {\n        cards = new HashMap<String, Account>();\n    }\n\n    public boolean\
    \ createAccount(Account acc) {\n        String card = Arrays.toString(acc.getCardNumber()).replaceAll(\"\
    [,\\\\[\\\\]\\\\ ]\", \"\");\n        if(cards.containsKey(card)) {\n        \
    \    return false;\n        } else {\n            cards.put(card, acc);\n    \
    \        return true;\n        }\n    }\n\n    private boolean logIntoAccount(String\
    \ cardNumber, int pin) {\n        if(!cards.containsKey(cardNumber)) {\n     \
    \       return false;\n        } else {\n            Account account = cards.get(cardNumber);\n\
    \            if(pin == account.getPinCode()) {\n                return true;\n\
    \            }\n            return false;\n        }\n    }\n\n    public Account\
    \ getAccess(String cardNumber, int pin) {\n        return cards.get(cardNumber);\n\
    \    }\n  }\n\n    public static void main(String[] args) {\n        Scanner scanner\
    \ = new Scanner(System.in);\n        String choose = \"\";\n        Database database\
    \ = new Database();\n        String cardNumber;\n        Account account;\n  \
    \      while(true) {\n            System.out.println(\"1. Create an account\"\
    );\n            System.out.println(\"2. Log into account\");\n            System.out.println(\"\
    0. Exit\");\n            choose = scanner.nextLine();\n\n            switch (choose)\
    \ {\n                case \"1\":\n                    do {\n                 \
    \       account = new Account();\n                    } while(!database.createAccount(account));\n\
    \n                    cardNumber = Arrays.toString(account.getCardNumber()).replaceAll(\"\
    [,\\\\[\\\\]\\\\ ]\", \"\");\n                    System.out.println(\"Your card\
    \ has been created\");\n                    System.out.println(\"Your card number:\"\
    );\n                    System.out.println(cardNumber);\n                    System.out.println(\"\
    Your card PIN:\");\n                    System.out.println(account.getPinCode());\n\
    \                    break;\n\n                case \"2\":\n                 \
    \   System.out.println(\"Enter your card number:\");\n                    cardNumber\
    \ = scanner.nextLine();\n                    System.out.println(\"Enter your PIN:\"\
    );\n                    int pin = scanner.nextInt();\n\n                    if(database.logIntoAccount(cardNumber,\
    \ pin)) {\n                        account = database.getAccess(cardNumber, pin);\n\
    \                        System.out.println(\"You have successfully logged in!\"\
    );\n\n                      logout:\n                        while (true) {\n\
    \                            System.out.println(\"1. Balance\");\n           \
    \                 System.out.println(\"2. Log out\");\n                      \
    \      System.out.println(\"0. Exit\");\n                            choose =\
    \ scanner.nextLine();\n\n                            switch (choose) {\n     \
    \                           case \"1\":\n                                    System.out.println(\"\
    Balance: \" + account.getBalance());\n                                    break;\n\
    \n                                case \"2\":\n                              \
    \      System.out.println(\"You have successfully logged out!\");\n          \
    \                          break logout;\n                                   \
    \ break;\n\n                                case \"0\":\n                    \
    \                System.out.println(\"Bye!\");\n                             \
    \       System.exit(0);\n                                    break;\n\n      \
    \                          default:\n                                    break;\n\
    \                            }\n                        }\n                  \
    \  } else {\n                        System.out.println(\"Wrong card number or\
    \ PIN!\");\n                    }\n                    break;\n\n            \
    \    case \"0\":\n                    System.out.println(\"Bye!\");\n        \
    \            System.exit(0);\n                    break;\n                default:\n\
    \                    break;\n            }\n        }\n    }\n}\n"
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesn’t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    import java.util.Random;
    import java.util.Scanner;

    public class Account {

        private int[] cardNumber;
        private int pinCode;
        private int balance;

        public Account() {
            cardNumber = new int[16];
            Random random = new Random();
            String bin = "4 0 0 0 0 0";
            Scanner scanner = new Scanner(bin);
            for (int i = 0; i < 16; i++) {
                if(i < 6) {
                    cardNumber[i] = scanner.nextInt();
                } else {
                    cardNumber[i] = random.nextInt(10);
                }
            }
            pinCode = random.nextInt(10000);
            balance = 0;
        }

        public int[] getCardNumber() {
            return cardNumber;
        }

        public int getPinCode() {
            return pinCode;
        }

        public void setPinCode(int pinCode) {
            this.pinCode = pinCode;
        }

        public int getBalance() {
            return balance;
        }

        public void addBalance(int amount) {
            if(amount > 0) {
                balance += amount;
            }
        }
    }
  learner_created: true
- name: src/banking/Database.java
  visible: true
  text: |-
    package banking;

    import java.util.Arrays;
    import java.util.HashMap;
    import java.util.Map;

    public class Database {

        private Map<String, Account> cards;

        public Database() {
            cards = new HashMap<String, Account>();
        }

        public boolean createAccount(Account acc) {
            String card = Arrays.toString(acc.getCardNumber()).replaceAll("[,\\[\\]\\ ]", "");
            if(cards.containsKey(card)) {
                return false;
            } else {
                cards.put(card, acc);
                return true;
            }
        }

        public boolean logIntoAccount(String cardNumber, int pin) {
            if(!cards.containsKey(cardNumber)) {
                return false;
            } else {
                Account account = cards.get(cardNumber);
                if(pin == account.getPinCode()) {
                    return true;
                }
                return false;
            }
        }

        public Account getAccess(String cardNumber, int pin) {
            return cards.get(cardNumber);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8426#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 17 Mar 2022 10:43:37 UTC
record: 2
